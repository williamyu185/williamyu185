# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/Users/dingyu/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="agnoster"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
plugins=(zsh-syntax-highlighting)
DEFAULT_USER="dingyu"

# git batch operate      by dingyu
testBranch="test_20170420"
currentGitBranch() {
	# 获取git当前分支
    	branch=''
    	cd $PWD
    	if [ -d '.git' ]; then
        	output=`git symbolic-ref --short -q HEAD`
        	if [ "$output" ]; then
            		branch="${output}"
        	fi
    	fi
	echo "$branch"
}
allBranch() {
	local allBranchName=`git branch`
	echo "$allBranchName"
}
pullOtherBranch() {
	git pull origin $1
}
checkoutToTestAndPull() {
	checkoutBranch $testBranch
	pullCurrentBranch
}
checkoutToMasterAndPull() {
	checkoutToOtherAndPull master
}
checkoutToOtherAndPull() {
	checkoutBranch $1
	pullCurrentBranch
}
pullCurrentBranch() {
	currentGitBranch
	pullOtherBranch $branch
}
checkoutBranch() {
	if [ ! -n "$1" ]; then
		echo "enter branch name"
		return
	fi
	git checkout $1
}
commitAndPush() {
	currentGitBranch
	git add .
	local commitDate=`date "+%Y-%m-%d %H:%M:%S"`
	if [ ! -n "$1" ]; 
	then
		echo "Automatically add time as submission information"
		git commit -m "$commitDate"
	else
		git commit -m "$1 $commitDate"
	fi
	pullCurrentBranch
	git push origin $branch
}
pushTestAndCheckoutBranch() {
	currentGitBranch
	if [ "$branch" != $testBranch ]; then
		echo `current branch must be ${testBranch}`
		return
	fi
	if [ ! -n "$1" ]; then
		echo "enter branch name"
		return
	fi
	pullCurrentBranch
	git push origin $testBranch
	checkoutBranch $1
}
creatLocalAndRemoteBranch() {
	if [ ! -n "$1" ]; then
		echo "enter branch name"
		return
	fi
	currentGitBranch
	if [ "$branch" != "master" ]; then
		echo "current branch must be master"
		return
	fi
	git checkout -b $1
	git push --set-upstream origin $1
}
delLocalAndRemoteBranch() {
	if [ ! -n "$1" ]; then
		echo "enter branch name"
		return
	fi
	git branch -D $1
	git push origin -d $1
}
containSomeoneAllBranchs() {
	if [ ! -n "$1" ]; then
		echo "enter branch name"
		return
	fi
	git branch -a --contains $1
}
